{"version":3,"sources":["webpack:///webpack/bootstrap 7ea6a178d2196c2fcb9f","webpack:///./src/app.js","webpack:///./src/views/MainView.js","webpack:///./src/views/NewView.js","webpack:///./src/views/DetailView.js","webpack:///./src/models/ElementGetter.js","webpack:///./src/models/ElementMaker.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,E;;;;;;ACRA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;;AAEA,oBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA,IAAG;;AAEH;AACA,oBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA,2B;;;;;;;ACrEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,IAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,0B;;;;;;;ACxIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,IAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;AC9LA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA,gC;;;;;;AChCA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,e;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 7ea6a178d2196c2fcb9f\n **/","var MainView = require( './views/MainView.js' );\n\nwindow.onload = function() {\n  main();\n}\n\nvar main = function() {\n  var mainView = new MainView();\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app.js\n ** module id = 0\n ** module chunks = 0\n **/","var ElementMaker = require( '../models/ElementMaker.js' );\nvar ElementGetter = require( '../models/ElementGetter.js' );\nvar DetailView = require( './DetailView.js' );\nvar NewView = require( './NewView.js' );\n\nvar MainView = function() {\n  this.div = document.getElementById( 'all-space' );\n  this.companyUrl = \"https://fintech-db-test.herokuapp.com/companys\";\n  this.companies = [];\n\n  this.getCompanies();\n}\n\nMainView.prototype = {\n\n  getCompanies: function() {\n    var request = new XMLHttpRequest();\n    request.open( 'GET', this.companyUrl );\n    request.setRequestHeader(\"Content-Type\", \"application/json\")\n    request.onload = () => {\n      if( request.status === 200 ) {\n        var companies = JSON.parse( request.responseText );\n        this.companies = companies;\n        this.show();\n      }\n    }\n    request.send( null );\n  },\n\n  show: function() {\n    console.log( this.companies );\n    var elementGetter = new ElementGetter();\n\n    for( var i = 0; i < this.companies.length; i++ ) {\n      var elementMaker = new ElementMaker( );\n      elementMaker.make( 'all-space', 'ul', this.companies[i].id );\n      var company = elementGetter.getElement( this.companies[i].id );\n      company.onclick = function( e ) {\n        this.showDetails( e.target.parentNode.id );\n      }.bind( this );\n      var companyName = elementMaker.makeList( this.companies[i].name, this.companies[i].id );\n      var companyPhone = elementMaker.makeList( this.companies[i].phone, this.companies[i].id );\n      var companyEmail = elementMaker.makeList( this.companies[i].email, this.companies[i].id );\n    }\n\n    var addButton = document.createElement( 'button' );\n    addButton.innerText = \"Add new...\";\n    addButton.onclick = function() {\n      this.changeView();\n    }.bind( this );\n\n    this.div.appendChild( addButton );\n\n  },\n\n  showDetails: function( id ) {\n    for( var i = 0; i < this.companies.length; i++ ) {\n      if( this.companies[i].id === parseInt( id )) {\n        var detailView = new DetailView( this.companies[i] );\n      }\n    }\n  },\n\n  changeView: function() {\n    console.log( \"Click\" );\n    var newView = new NewView();\n  }\n}\n\nmodule.exports = MainView;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/views/MainView.js\n ** module id = 1\n ** module chunks = 0\n **/","var ElementMaker = require( '../models/ElementMaker.js' );\nvar ElementGetter = require( '../models/ElementGetter.js' );\n\nvar NewView = function() {\n  this.div = document.getElementById( 'new-space' );\n  this.companyUrl = \"https://fintech-db-test.herokuapp.com/companys\";\n\n  this.show();\n}\n\nNewView.prototype = {\n  show: function() {\n    var elementMaker = new ElementMaker();\n    elementMaker.make( 'new-space', 'input', 'name', 'Name...' );\n    elementMaker.make( 'new-space', 'input', 'phone', 'Phone...' );\n    elementMaker.make( 'new-space', 'input', 'email', 'Email...' );\n    elementMaker.make( 'new-space', 'input', 'contact', 'Point Of Contact...' );\n\n    elementMaker.make( 'new-space', 'input', 'addressLine1', 'Address Line 1...' );\n    elementMaker.make( 'new-space', 'input', 'addressLine2', 'Address Line 2...' );\n    elementMaker.make( 'new-space', 'input', 'addressCity', 'City...' );\n    elementMaker.make( 'new-space', 'input', 'addressRegion', 'Region...' );\n    elementMaker.make( 'new-space', 'input', 'addressPostCode', 'Post Code...' );\n\n    elementMaker.make( 'new-space', 'input', 'lastContact', 'Last Contact...', 'date' );\n    elementMaker.make( 'new-space', 'input', 'pastWork', 'Previous Work...' );\n    elementMaker.make( 'new-space', 'input', 'techUsed', 'Tech Used...' );\n    elementMaker.make( 'new-space', 'input', 'typeOfWork', 'Type of work undertaken...' );\n    elementMaker.make( 'new-space', 'input', 'preferredWork', 'Preferred Work...' );\n\n    elementMaker.make( 'new-space', 'input', 'haveWeMet', 'Have we met?', 'checkbox' );\n    elementMaker.make( 'new-space', 'input', 'haveWeSpoken', 'Have we spoken?', 'checkbox' );\n    elementMaker.make( 'new-space', 'input', 'areTheyInterested', 'Are they interested?', 'checkbox' );\n    elementMaker.make( 'new-space', 'input', 'externalReference', 'External References?', 'checkbox' );\n\n    var submit = document.createElement( 'button' );\n    submit.innerText = \"Submit\";\n    submit.onclick = function() {\n      this.gatherInfo();\n    }.bind( this );\n    this.div.appendChild( submit );\n  },\n\n  gatherInfo: function() {\n    var elementGetter = new ElementGetter();\n\n    var name = elementGetter.getElementValue( 'name' );\n    var phone = elementGetter.getElementValue( 'phone' );\n    var email = elementGetter.getElementValue( 'email' );\n    var contact = elementGetter.getElementValue( 'contact' );\n\n    var addressLine1 = elementGetter.getElementValue( 'addressLine1' );\n    var addressLine2 = elementGetter.getElementValue( 'addressLine2' );\n    var addressCity = elementGetter.getElementValue( 'addressCity' );\n    var addressRegion = elementGetter.getElementValue( 'addressRegion' );\n    var addressPostCode = elementGetter.getElementValue( 'addressPostCode' );\n\n    var lastContact = elementGetter.getElementValue( 'lastContact' );\n    var pastWork = elementGetter.getElementValue( 'pastWork' );\n    var techUsed = elementGetter.getElementValue( 'techUsed' );\n    var typeOfWork = elementGetter.getElementValue( 'typeOfWork' );\n    var preferredWork = elementGetter.getElementValue( 'preferredWork' );\n\n    var haveWeMet = elementGetter.getElementValue( 'haveWeMet' );\n    var haveWeSpoken = elementGetter.getElementValue( 'haveWeSpoken' );\n    var areTheyInterested = elementGetter.getElementValue( 'areTheyInterested' );\n    var externalReference = elementGetter.getElementValue( 'externalReference' );\n\n    this.addCompanyToDB( name, phone, email, contact, addressLine1, addressLine2, addressCity, addressRegion, addressPostCode, lastContact, pastWork, techUsed, typeOfWork, preferredWork, haveWeMet, haveWeSpoken, areTheyInterested, externalReference );\n  },\n\n  addCompanyToDB: function( name, phone, email, contact, addressLine1, addressLine2, addressCity, addressRegion, addressPostCode, lastContact, pastWork, techUsed, typeOfWork, preferredWork, haveWeMet, haveWeSpoken, areTheyInterested, externalReference ) {\n\n    var request = new XMLHttpRequest();\n    request.open( 'POST', this.companyUrl);\n    request.setRequestHeader(\"Content-Type\", \"application/json\");\n\n    request.onload = () => {\n      if( request.status === 201 ) {\n        var companys = JSON.parse( request.responseText )\n      }\n      this.resetForm();\n    }\n    var data = {\n      company: {\n        name: name, \n        phone: phone, \n        email: email, \n        contact: contact,\n        address_line_1: addressLine1, \n        address_line_2: addressLine2, \n        address_city: addressCity, \n        address_region: addressRegion, \n        address_postcode: addressPostCode, \n        last_contact: lastContact, \n        past_work: pastWork, \n        tech_used: techUsed, \n        type_of_work: typeOfWork, \n        preferred_work: preferredWork, \n        have_we_met: haveWeMet, \n        have_we_spoken: haveWeSpoken, \n        are_they_interested: areTheyInterested, \n        external_reference: externalReference \n      }\n    }\n    request.send( JSON.stringify( data ));\n  },\n\n  resetForm: function() {\n    var elementGetter = new ElementGetter();\n\n    elementGetter.resetElement( 'name' );\n    elementGetter.resetElement( 'phone' );\n    elementGetter.resetElement( 'email' );\n    elementGetter.resetElement( 'contact' );\n\n    elementGetter.resetElement( 'addressLine1' );\n    elementGetter.resetElement( 'addressLine2' );\n    elementGetter.resetElement( 'addressCity' );\n    elementGetter.resetElement( 'addressRegion' );\n    elementGetter.resetElement( 'addressPostCode' );\n\n    elementGetter.resetElement( 'lastContact' );\n    elementGetter.resetElement( 'pastWork' );\n    elementGetter.resetElement( 'techUsed' );\n    elementGetter.resetElement( 'typeOfWork' );\n    elementGetter.resetElement( 'preferredWork' );\n\n    elementGetter.resetElement( 'haveWeMet' );\n    elementGetter.resetElement( 'haveWeSpoken' );\n    elementGetter.resetElement( 'areTheyInterested' );\n    elementGetter.resetElement( 'externalReference' );\n  }\n\n}\n\nmodule.exports = NewView;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/views/NewView.js\n ** module id = 3\n ** module chunks = 0\n **/","var ElementMaker = require( '../models/ElementMaker.js' );\nvar ElementGetter = require( '../models/ElementGetter.js' );\nvar MainView = require( './MainView.js' );\n\nvar DetailView = function( company ) {\n  this.company = company;\n  this.companyUrl = \"https://fintech-db-test.herokuapp.com/companys\";\n\n  this.show();\n}\n\nDetailView.prototype = {\n  show: function() {\n    this.clear();\n\n    var basicMaker = new ElementMaker();\n    basicMaker.make( 'detail-space', 'ul', 'companyBasicDetails' );\n\n    basicMaker.makeList( this.company.name, 'companyBasicDetails', 'Name' );\n    basicMaker.makeList( this.company.phone, 'companyBasicDetails', 'Phone');\n    basicMaker.makeList( this.company.email, 'companyBasicDetails', 'Email' );\n    basicMaker.makeList( this.company.contact, 'companyBasicDetails', 'Point of Contact' );\n\n    var addressMaker = new ElementMaker();\n    addressMaker.make( 'detail-space', 'ul', 'companyAddress' );\n\n    addressMaker.makeList( this.company.address_line_1, 'companyAddress', 'Address Line 1' );\n    addressMaker.makeList( this.company.address_line_2, 'companyAddress', 'Address Line 2' );\n    addressMaker.makeList( this.company.address_city, 'companyAddress', 'City' );\n    addressMaker.makeList( this.company.address_region, 'companyAddress', 'Region' );\n    addressMaker.makeList( this.company.address_postcode, 'companyAddress', 'Post Code' );\n\n    var detailMaker = new ElementMaker();\n    detailMaker.make( 'detail-space', 'ul', 'companyDetails' );\n\n    detailMaker.makeList( this.company.last_contact, 'companyDetails', 'Last Contact' );\n    detailMaker.makeList( this.company.type_of_work, 'companyDetails', 'Type Of Work' );\n    detailMaker.makeList( this.company.tech_used, 'companyDetails', 'Technology Used' );\n    detailMaker.makeList( this.company.past_work, 'companyDetails', 'Past Work' );\n    detailMaker.makeList( this.company.preferred_work, 'companyDetails', 'Preferred Work' );\n\n    var checklistMaker = new ElementMaker();\n    checklistMaker.make( 'detail-space', 'ul', 'companyChecklist' );\n\n    checklistMaker.makeList( this.company.have_we_spoken, 'companyChecklist', 'Have we spoken?' );\n    checklistMaker.makeList( this.company.have_we_met, 'companyChecklist', 'Have we met?' );\n    checklistMaker.makeList( this.company.are_they_interested, 'companyChecklist', 'Are they interested?' );\n    checklistMaker.makeList( this.company.external_reference, 'companyChecklist', 'External Reference?' );\n\n    var detailSpace = document.getElementById( 'detail-space' );\n\n    var editButton = document.createElement( 'button' );\n    editButton.innerText = \"Edit...\";\n    editButton.onclick = function() {\n      this.edit( this.company.id );\n    }.bind( this );\n\n    var deleteButton = document.createElement( 'button' );\n    deleteButton.innerText = \"Delete...\";\n    deleteButton.onclick = function() {\n      this.edit();\n    }.bind( this );\n\n    var backButton = document.createElement( 'button' );\n    backButton.innerText = \"Back...\";\n    backButton.onclick = function() {\n      this.clear();\n      var mainView = new MainView();\n    }.bind( this );\n\n    detailSpace.appendChild( editButton );\n    detailSpace.appendChild( deleteButton );\n    detailSpace.appendChild( backButton );\n  },\n\n  clear: function() {\n    var allSpace = document.getElementById( \"all-space\" );\n    while( allSpace.hasChildNodes() ) {\n      allSpace.removeChild( allSpace.lastChild );\n    }\n\n    var detailSpace = document.getElementById( \"detail-space\" );\n    while( detailSpace.hasChildNodes() ) {\n      detailSpace.removeChild( detailSpace.lastChild );\n    }\n  },\n\n  edit: function( id ) {\n    console.log( this.company );\n    var elementMaker = new ElementMaker();\n\n    elementMaker.edit( 'edit-space', 'name', this.company.name );\n    elementMaker.edit( 'edit-space', 'phone', this.company.phone );\n    elementMaker.edit( 'edit-space', 'email', this.company.email );\n    elementMaker.edit( 'edit-space', 'contact', this.company.contact );\n\n    elementMaker.edit( 'edit-space', 'addressLine1', this.company.address_line_1 );\n    elementMaker.edit( 'edit-space', 'addressLine2', this.company.address_line_2 );\n    elementMaker.edit( 'edit-space', 'addressCity', this.company.address_city  );\n    elementMaker.edit( 'edit-space', 'addressRegion', this.company.address_region );\n    elementMaker.edit( 'edit-space', 'addressPostCode', this.company.address_postcode );\n\n    elementMaker.edit( 'edit-space', 'lastContact', this.company.last_contact, 'date', 'Last Contact: ' );\n    elementMaker.edit( 'edit-space', 'pastWork', this.company.past_work );\n    elementMaker.edit( 'edit-space', 'techUsed', this.company.tech_used );\n    elementMaker.edit( 'edit-space', 'typeOfWork', this.company.type_of_work );\n    elementMaker.edit( 'edit-space', 'preferredWork', this.company.preferred_work );\n\n    elementMaker.edit( 'edit-space', 'haveWeSpoken', this.company.have_we_spoken, 'checkbox', 'Have we spoken?' );\n    elementMaker.edit( 'edit-space', 'haveWeMet', this.company.have_we_met, 'checkbox', 'Have we met?' );\n    elementMaker.edit( 'edit-space', 'areTheyInterested', this.company.are_they_interested, 'checkbox', 'Are they interested?' );\n    elementMaker.edit( 'edit-space', 'externalReference', this.company.external_reference, 'checkbox', 'External Reference?' );\n\n    var editSpace = document.getElementById( 'edit-space' );\n    var submitButton = document.createElement( 'button' );\n    submitButton.innerText = 'submit';\n    submitButton.onclick = function() {\n      this.gatherInfo( id );\n    }.bind( this )\n    editSpace.appendChild( submitButton );\n  },\n\n  gatherInfo: function( id ) {\n    console.log( id );\n    var elementGetter = new ElementGetter();\n\n    var name = elementGetter.getElementValue( 'name' );\n    console.log( name )\n    // var phone = elementGetter.getElementValue( 'phone' );\n    // var email = elementGetter.getElementValue( 'email' );\n    // var contact = elementGetter.getElementValue( 'contact' );\n\n    // var addressLine1 = elementGetter.getElementValue( 'addressLine1' );\n    // var addressLine2 = elementGetter.getElementValue( 'addressLine2' );\n    // var addressCity = elementGetter.getElementValue( 'addressCity' );\n    // var addressRegion = elementGetter.getElementValue( 'addressRegion' );\n    // var addressPostCode = elementGetter.getElementValue( 'addressPostCode' );\n\n    // var lastContact = elementGetter.getElementValue( 'lastContact' );\n    // var pastWork = elementGetter.getElementValue( 'pastWork' );\n    // var techUsed = elementGetter.getElementValue( 'techUsed' );\n    // var typeOfWork = elementGetter.getElementValue( 'typeOfWork' );\n    // var preferredWork = elementGetter.getElementValue( 'preferredWork' );\n\n    // var haveWeMet = elementGetter.getElementValue( 'haveWeMet' );\n    // var haveWeSpoken = elementGetter.getElementValue( 'haveWeSpoken' );\n    // var areTheyInterested = elementGetter.getElementValue( 'areTheyInterested' );\n    // var externalReference = elementGetter.getElementValue( 'externalReference' );\n\n    // this.updateDB( id, name, phone, email, contact, addressLine1, addressLine2, addressCity, addressRegion, addressPostCode, lastContact, pastWork, techUsed, typeOfWork, preferredWork, haveWeMet, haveWeSpoken, areTheyInterested, externalReference );\n  },\n\n  updateDB: function( id, name, phone, email, contact, addressLine1, addressLine2, addressCity, addressRegion, addressPostCode, lastContact, pastWork, techUsed, typeOfWork, preferredWork, haveWeMet, haveWeSpoken, areTheyInterested, externalReference ) {\n  //   var request = new XMLHttpRequest();\n  //   request.open( 'PUT', this.url + id );\n  //   request.setRequestHeader( \"Content-type\", \"application/json\" );\n  //   request.onload = () => {\n  //     if( request.status === 200 ) {\n  //       var companys = JSON.parse( request.responseText )\n  //     }\n  //     // this.resetForm();\n  //     console.log( 'hello asjkdahsdl')\n  //   }\n  //   var data = {\n  //     company: {\n  //       name: name, \n  //       phone: phone, \n  //       email: email, \n  //       contact: contact,\n  //       address_line_1: addressLine1, \n  //       address_line_2: addressLine2, \n  //       address_city: addressCity, \n  //       address_region: addressRegion, \n  //       address_postcode: addressPostCode, \n  //       last_contact: lastContact, \n  //       past_work: pastWork, \n  //       tech_used: techUsed, \n  //       type_of_work: typeOfWork, \n  //       preferred_work: preferredWork, \n  //       have_we_met: haveWeMet, \n  //       have_we_spoken: haveWeSpoken, \n  //       are_they_interested: areTheyInterested, \n  //       external_reference: externalReference \n  //     }\n  //   }\n  //   request.send( JSON.stringify( data ));\n  }\n\n}\n\nmodule.exports = DetailView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/views/DetailView.js\n ** module id = 5\n ** module chunks = 0\n **/","var ElementGetter = function() {\n\n}\n\nElementGetter.prototype = {\n\n  getElement: function( id ) {\n    var elementToGet = document.getElementById( id );\n    return elementToGet;\n  },\n\n  getElementValue: function( id ) {\n    var elementToGet = document.getElementById( id );\n    var value = elementToGet.value;\n    if( elementToGet.type === 'checkbox' ) {\n      value = elementToGet.checked\n    }\n    return value;\n  },\n\n  resetElement: function( id ) {\n    var elementToGet = document.getElementById( id );\n    if ( elementToGet.type === 'date' ) {\n      elementToGet.value = '';\n    } else if( elementToGet.type !== 'checkbox' ) {\n      elementToGet.value = elementToGet.placeholder\n    } else {\n      elementToGet.checked = false;\n    }\n  }\n}\n\nmodule.exports = ElementGetter;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/models/ElementGetter.js\n ** module id = 6\n ** module chunks = 0\n **/","var ElementGetter = require( './ElementGetter.js' );\n\nvar ElementMaker = function() {\n \n};\n\nElementMaker.prototype = {\n\n  make: function( div, element, id, text, additional, edit ) {\n    var whereToPut = document.getElementById( div );\n    var whatToMake = document.createElement( element );\n    whatToMake.id = id;\n\n    switch( element ) {\n      case 'ul':\n        whereToPut.appendChild( whatToMake );\n        break;\n      case 'input':\n        if( edit ) {\n          whatToMake.value = text;\n          whereToPut.appendChild( whatToMake );\n          return;\n        }\n        whatToMake.placeholder = text;\n        if( additional ) {\n          whatToMake.type = additional;\n          var additionalText = document.createElement( 'p' );\n          additionalText.innerText = text;\n          whereToPut.appendChild( additionalText );\n        }\n        whereToPut.appendChild( whatToMake );\n        break;\n      default:\n        whatToMake.innerText = text;\n        whereToPut.appendChild( whatToMake );\n    }\n  },\n\n  makeList: function( text, ul, extraText ) {\n    var elementGetter = new ElementGetter();\n    var unorderedList = elementGetter.getElement( ul );\n    var whatToMake = document.createElement( 'li' );\n\n    if( extraText ) {\n      whatToMake.innerText = extraText + \": \" + text;\n      console.log( whatToMake.innerText );\n    } else {\n      whatToMake.innerText = text;\n    }\n    unorderedList.appendChild( whatToMake );\n  },\n\n  edit: function( div, id, value, additional, text ) {\n    var whereToPut = document.getElementById( div );\n    var whatToMake = document.createElement( 'input' );\n    whatToMake.id = id;\n    switch( additional ) {\n      case 'checkbox':\n        whatToMake.type = additional;\n        var additionalText = document.createElement( 'p' );\n        additionalText.innerText = text;\n        whereToPut.appendChild( additionalText );\n        whatToMake.checked = value;\n        break;\n      case 'date':\n        whatToMake.type = additional;\n        var additionalText = document.createElement( 'p' );\n        additionalText.innerText = text;\n        whereToPut.appendChild( additionalText );\n        whatToMake.value = value;\n        break; \n    }\n    whatToMake.value = value;\n    whereToPut.appendChild( whatToMake );\n  }\n};\n\nmodule.exports = ElementMaker;\n\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/models/ElementMaker.js\n ** module id = 7\n ** module chunks = 0\n **/"],"sourceRoot":""}